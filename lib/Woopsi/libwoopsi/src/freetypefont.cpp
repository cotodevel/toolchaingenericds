#include "freetypefont.h"
#include "freetypefacemanager.h"
#include "freetypecache.h"
#include "mutablebitmapbase.h"
#include "woopsistring.h"
#include "stringiterator.h"

// I have implemented three different ways to copy the bitmap with anti-
// aliasing.  To switch between them use this define
#define fast

using namespace WoopsiUI;

FreeTypeFont::FreeTypeFont(const FreeTypeCache* fontCache,const FaceID* faceID, const u8 width, const u8 height, const u16 colour) : FontBase(height, 0) { // Don't need transparency

	setColour(colour);
	_fontCache = fontCache;
	_faceID = faceID;
	_charMapIndex = 0;
	_scaler.face_id = (FTC_FaceID) faceID;
	_scaler.width = (FT_UInt) width;
	_scaler.height = (FT_UInt) height;
	_scaler.pixel = 72; // DPI
	_scaler.x_res = 0;  // Computations are done in pixels and not real units
	_scaler.y_res = 0;  // Computations are done in pixels and not real unit
	getSbit(' '); 		// Load the ' ' blank char...no bitmap, no drawing, but
						// metrics, fastest loading
}

void FreeTypeFont::getSbit(const u32 codepoint) const{
    _fontCache->loadSbit(_scaler, _charMapIndex, codepoint, (FTC_SBit *) &_sbit);
}

u16 FreeTypeFont::getStringWidth(const WoopsiString& text) const {     	
	if (text.getLength() == 0) return 0;
	
	u32 width = 0; 
	StringIterator* iterator = text.newStringIterator();
	
	do { 
		u32 codepoint = iterator->getCodePoint();
		
		if ((codepoint != 10) && (codepoint != 13)) {         
			getSbit(codepoint);
			width += _sbit->xadvance;
		}
	}  while (iterator->moveToNext());
	
	delete iterator;
	return width;
}

u16 FreeTypeFont::getStringWidth(const WoopsiString& text, s32 startIndex, s32 length) const { 
	StringIterator* iterator = text.newStringIterator();
	if ((!iterator->moveTo(startIndex)) || (length == 0)) {
		delete iterator;
		return 0;
	}
		
	u32 width = 0; 
	do {
		u32 codepoint = iterator->getCodePoint();
		if ((codepoint != 10) && (codepoint != 13)) {         
			getSbit(codepoint);
			width += _sbit->xadvance;
		}
		length--;
	} while ((iterator->moveToNext()) && (length > 0));
	
	delete iterator;
	return width;
};

#ifdef faster

/**
The following array has been produced with the following Maple code : 

for a from 0 to 255 do
     L[a]:=0:
     for b from 0 to 31 do
 n:=(floor(a*b/255)-floor(a*b/256)):
         if (n>0) then L[a] := L[a] + 2^b; fi;
     od;
 od:
 seq(sprintf("0x%X%X",ceil(L[a]/2^16),modp(L[a],2^16)), a=0..255);

      
The purpose of this array is that:
	if 0<=a<=255 and 0<=b<= 31 then a*b/255 = ((a*b) << 6) + ((transparencyJump[a] & Bit(b)) ? 1:0); 

The aim of this array is to replace a possibly costly division by 255 by a bit
rotation and an addition.  The gain in speed depends on the arm assembly.
           
It could be made even faster with an array of 256*32*1 byte = 8k, by replacing
the multiplication and the division by an array lookup.

by a*b/255 = result[a<<5+b]
*/


 u32 transparencyJump[256] =  {
0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x20, 
0x0, 0x40008000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x20, 0x0, 
0x0, 0x80000, 0x40008000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x20000, 0x20, 0x0, 0x0, 
0x0, 0x0, 0x0, 0x42108420, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x400, 0x4002000, 0x20, 0x0, 0x0, 0x0, 
0x0, 0x0, 0x80000, 0x0, 0x40008000, 0x0, 0x0, 0x40, 0x0, 0x10204080, 0x0, 0x20, 0x0, 0x0, 0x0, 0x0, 
0x0, 0x0, 0x10000, 0x0, 0x0, 0x49249248, 0x0, 0x0, 0x20000, 0x800, 0x20, 0x0, 0x2000, 0x40800, 0x80, 0x0, 
0x0, 0x20000, 0x0, 0x80000, 0x800, 0x0, 0x42108420, 0x0, 0x8000, 0x20, 0x0, 0x80000, 0x4000, 0x0, 0x0, 0x800, 
0x0, 0x0, 0x0, 0x100, 0x40800, 0x1000, 0x4002000, 0x40008000, 0x20, 0x80, 0x800, 0x8000, 0x0, 0x0, 0x0, 0x0, 
0x0, 0x0, 0x0, 0x0, 0xA0000, 0x2000, 0x200, 0x20, 0x40008000, 0x10000, 0x0, 0x0, 0x80000, 0x20000, 0x804200, 0x2000, 
0x0, 0x40000, 0x10204080, 0x0, 0x80, 0x1001000, 0x20020, 0x400, 0x0, 0x42108420, 0x0, 0x10000, 0x40, 0x4002000, 0x200, 0x0, 
0x0, 0x8000, 0x40000, 0x0, 0x10004000, 0x80020, 0x100, 0x4000, 0x0, 0x0, 0x49249248, 0x0, 0x0, 0x80000, 0x2400, 0x80, 
0x20000, 0x4002000, 0x800, 0x4010400, 0x8020, 0x81000, 0x0, 0x0, 0x2000, 0x20000, 0x40800, 0x44008000, 0x80, 0x8800, 0x0, 0x0, 
0x0, 0x0, 0x22000, 0x220, 0x40000, 0x0, 0x80000, 0x804200, 0x800, 0x10004000, 0x1080, 0x20000, 0x42108420, 0x0, 0x84000, 0x200, 
0x8000, 0x40800, 0x10020, 0x800, 0x0, 0x41041040, 0x80000, 0x2080, 0x4002000, 0x100, 0x8000, 0x10204080, 0x20000, 0x40408000, 0x800, 0x0, 
0x0, 0x2020, 0x4000, 0x804200, 0x10000, 0x20080, 0x4010400, 0x80200, 0x40800, 0x800, 0x1001000, 0x2000, 0x4002000, 0x18004000, 0x60008000, 0x80000, 
0x20, 0x40, 0x80, 0x300, 0xC00, 0x3000, 0x1C000, 0xE0000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xFFFFFFFE};

/**
The following array has been produced with the following Maple code : 

for a from 0 to 255 do
      for b from 0 to 31 do
          L[a*32+b]:=floor(a*b/255);
      od;
  od:
  seq(L[a], a=0..256*32-1);
*/
#endif

#ifdef fastest

u8 result[256*32] = {
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1,
        1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3,
        3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3,
        3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3,
        3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 2,
        2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0,
        0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3,
        3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 2,
        2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 4, 0, 0, 0, 0, 0, 0,
        0, 0, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3,
        3, 3, 3, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2,
        2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 0, 0, 0, 0, 0,
        0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3,
        3, 3, 3, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2,
        2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 0, 0, 0, 0,
        0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3,
        3, 3, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1,
        2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 0, 0, 0,
        0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3,
        3, 3, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1,
        2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 0, 0,
        0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3,
        3, 3, 4, 4, 4, 4, 4, 4, 5, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1,
        2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 5, 5, 0,
        0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3,
        3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1,
        1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 5, 5, 5,
        0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3,
        3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1,
        1, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 5, 5, 5,
        5, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3,
        3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 1, 1, 1,
        1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 5, 5, 5,
        5, 5, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3,
        3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 0, 0, 0, 0, 0, 1, 1, 1,
        1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5,
        5, 6, 6, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3,
        3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 0, 0, 0, 0, 0, 1, 1,
        1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5,
        5, 6, 6, 6, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3,
        3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 0, 0, 0, 0, 0, 1,
        1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5,
        5, 6, 6, 6, 6, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3,
        3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 0, 0, 0, 0, 0,
        1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5,
        5, 6, 6, 6, 6, 6, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3,
        3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 7, 0, 0, 0, 0,
        0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5,
        5, 6, 6, 6, 6, 6, 7, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3,
        3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 7, 7, 0, 0, 0,
        0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5,
        5, 5, 6, 6, 6, 6, 7, 7, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2,
        3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 7, 7, 7, 0, 0,
        0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5,
        5, 5, 6, 6, 6, 6, 7, 7, 7, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2,
        3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 7, 7, 7, 7, 0,
        0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5,
        5, 5, 6, 6, 6, 6, 7, 7, 7, 7, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2,
        2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 7, 7, 7, 8,
        0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5,
        5, 5, 6, 6, 6, 6, 7, 7, 7, 7, 8, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2,
        2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 7, 7, 7, 8,
        8, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5,
        5, 5, 5, 6, 6, 6, 7, 7, 7, 7, 8, 8, 0, 0, 0, 0, 1, 1, 1, 1, 2,
        2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 6, 6, 6, 6, 7, 7, 7, 7,
        8, 8, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 5,
        5, 5, 5, 6, 6, 6, 6, 7, 7, 7, 8, 8, 8, 0, 0, 0, 0, 1, 1, 1, 1,
        2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 7, 7, 7, 7,
        8, 8, 8, 0, 0, 0, 0, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 4, 4, 4, 4,
        5, 5, 5, 6, 6, 6, 6, 7, 7, 7, 8, 8, 8, 8, 0, 0, 0, 0, 1, 1, 1,
        2, 2, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 6, 6, 6, 6, 7, 7, 7,
        8, 8, 8, 8, 0, 0, 0, 0, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 4, 4, 4,
        5, 5, 5, 5, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 9, 0, 0, 0, 0, 1, 1,
        1, 2, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 7, 7, 7,
        8, 8, 8, 8, 9, 0, 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4,
        4, 5, 5, 5, 6, 6, 6, 6, 7, 7, 7, 8, 8, 8, 9, 9, 0, 0, 0, 0, 1,
        1, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 7, 7, 7,
        7, 8, 8, 8, 9, 9, 0, 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4,
        4, 4, 5, 5, 5, 6, 6, 6, 7, 7, 7, 8, 8, 8, 8, 9, 9, 0, 0, 0, 0,
        1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 7, 7,
        7, 8, 8, 8, 9, 9, 9, 0, 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4,
        4, 4, 5, 5, 5, 6, 6, 6, 6, 7, 7, 7, 8, 8, 8, 9, 9, 9, 0, 0, 0,
        0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 7, 7,
        7, 8, 8, 8, 9, 9, 9, 9, 0, 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3,
        4, 4, 4, 5, 5, 5, 6, 6, 6, 7, 7, 7, 8, 8, 8, 9, 9, 9, 10, 0,
        0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6,
        7, 7, 7, 8, 8, 8, 9, 9, 9, 10, 0, 0, 0, 1, 1, 1, 2, 2, 2, 3,
        3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 7, 7, 7, 8, 8, 8, 9, 9, 9,
        10, 10, 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5,
        6, 6, 6, 7, 7, 7, 8, 8, 8, 9, 9, 9, 10, 10, 0, 0, 0, 1, 1, 1,
        2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 7, 7, 7, 8, 8, 8,
        9, 9, 9, 10, 10, 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4,
        5, 5, 5, 6, 6, 6, 7, 7, 7, 8, 8, 8, 9, 9, 10, 10, 10, 0, 0, 0,
        1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 7, 7, 8,
        8, 8, 9, 9, 9, 10, 10, 10, 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3,
        4, 4, 4, 5, 5, 6, 6, 6, 7, 7, 7, 8, 8, 8, 9, 9, 9, 10, 10, 10,
        0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 6, 6, 6, 7,
        7, 7, 8, 8, 8, 9, 9, 9, 10, 10, 11, 0, 0, 0, 1, 1, 1, 2, 2, 2,
        3, 3, 3, 4, 4, 5, 5, 5, 6, 6, 6, 7, 7, 7, 8, 8, 9, 9, 9, 10,
        10, 10, 11, 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 4, 4, 4, 5, 5, 5,
        6, 6, 6, 7, 7, 8, 8, 8, 9, 9, 9, 10, 10, 10, 11, 0, 0, 0, 1,
        1, 1, 2, 2, 2, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 7, 7, 7, 8, 8, 8,
        9, 9, 9, 10, 10, 11, 11, 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 4,
        4, 4, 5, 5, 5, 6, 6, 7, 7, 7, 8, 8, 8, 9, 9, 10, 10, 10, 11,
        11, 0, 0, 0, 1, 1, 1, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 6, 6, 6,
        7, 7, 7, 8, 8, 9, 9, 9, 10, 10, 10, 11, 11, 0, 0, 0, 1, 1, 1,
        2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 6, 6, 6, 7, 7, 7, 8, 8, 9, 9, 9,
        10, 10, 11, 11, 11, 0, 0, 0, 1, 1, 1, 2, 2, 3, 3, 3, 4, 4, 4,
        5, 5, 6, 6, 6, 7, 7, 8, 8, 8, 9, 9, 9, 10, 10, 11, 11, 11, 0,
        0, 0, 1, 1, 1, 2, 2, 3, 3, 3, 4, 4, 5, 5, 5, 6, 6, 6, 7, 7, 8,
        8, 8, 9, 9, 10, 10, 10, 11, 11, 12, 0, 0, 0, 1, 1, 1, 2, 2, 3,
        3, 3, 4, 4, 5, 5, 5, 6, 6, 7, 7, 7, 8, 8, 9, 9, 9, 10, 10, 10,
        11, 11, 12, 0, 0, 0, 1, 1, 1, 2, 2, 3, 3, 3, 4, 4, 5, 5, 5, 6,
        6, 7, 7, 7, 8, 8, 9, 9, 9, 10, 10, 11, 11, 11, 12, 0, 0, 0, 1,
        1, 2, 2, 2, 3, 3, 4, 4, 4, 5, 5, 6, 6, 6, 7, 7, 8, 8, 8, 9, 9,
        10, 10, 10, 11, 11, 12, 12, 0, 0, 0, 1, 1, 2, 2, 2, 3, 3, 4,
        4, 4, 5, 5, 6, 6, 6, 7, 7, 8, 8, 8, 9, 9, 10, 10, 10, 11, 11,
        12, 12, 0, 0, 0, 1, 1, 2, 2, 2, 3, 3, 4, 4, 4, 5, 5, 6, 6, 6,
        7, 7, 8, 8, 8, 9, 9, 10, 10, 11, 11, 11, 12, 12, 0, 0, 0, 1,
        1, 2, 2, 2, 3, 3, 4, 4, 4, 5, 5, 6, 6, 7, 7, 7, 8, 8, 9, 9, 9,
        10, 10, 11, 11, 11, 12, 12, 0, 0, 0, 1, 1, 2, 2, 2, 3, 3, 4,
        4, 4, 5, 5, 6, 6, 7, 7, 7, 8, 8, 9, 9, 9, 10, 10, 11, 11, 12,
        12, 12, 0, 0, 0, 1, 1, 2, 2, 2, 3, 3, 4, 4, 5, 5, 5, 6, 6, 7,
        7, 7, 8, 8, 9, 9, 10, 10, 10, 11, 11, 12, 12, 13, 0, 0, 0, 1,
        1, 2, 2, 2, 3, 3, 4, 4, 5, 5, 5, 6, 6, 7, 7, 8, 8, 8, 9, 9,
        10, 10, 11, 11, 11, 12, 12, 13, 0, 0, 0, 1, 1, 2, 2, 2, 3, 3,
        4, 4, 5, 5, 5, 6, 6, 7, 7, 8, 8, 8, 9, 9, 10, 10, 11, 11, 11,
        12, 12, 13, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 4, 4, 5, 5, 6, 6, 6,
        7, 7, 8, 8, 9, 9, 9, 10, 10, 11, 11, 12, 12, 12, 13, 0, 0, 0,
        1, 1, 2, 2, 3, 3, 3, 4, 4, 5, 5, 6, 6, 6, 7, 7, 8, 8, 9, 9,
        10, 10, 10, 11, 11, 12, 12, 13, 13, 0, 0, 0, 1, 1, 2, 2, 3, 3,
        3, 4, 4, 5, 5, 6, 6, 7, 7, 7, 8, 8, 9, 9, 10, 10, 10, 11, 11,
        12, 12, 13, 13, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 4, 4, 5, 5, 6,
        6, 7, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 11, 12, 12, 13, 13, 0,
        0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 8, 9,
        9, 10, 10, 11, 11, 12, 12, 12, 13, 13, 0, 0, 0, 1, 1, 2, 2, 3,
        3, 4, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 9, 10, 10, 11, 11,
        12, 12, 13, 13, 13, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 5,
        6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 10, 11, 11, 12, 12, 13, 13,
        14, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 5, 6, 6, 7, 7, 8,
        8, 9, 9, 10, 10, 11, 11, 11, 12, 12, 13, 13, 14, 0, 0, 0, 1,
        1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10,
        11, 11, 12, 12, 12, 13, 13, 14, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4,
        4, 5, 5, 6, 6, 7, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12,
        13, 13, 14, 14, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6,
        7, 7, 8, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14,
        0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9,
        9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 0, 0, 0, 1, 1, 2,
        2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11,
        11, 12, 12, 13, 13, 14, 14, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4,
        5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13,
        13, 14, 14, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7,
        8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 0, 0,
        0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10,
        10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 0, 0, 0, 1, 1, 2, 2,
        3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12,
        12, 13, 13, 14, 14, 15, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5,
        6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14,
        14, 15, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8,
        9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 0, 0, 1,
        1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11,
        11, 12, 12, 13, 13, 14, 14, 15, 15, 0, 0, 1, 1, 2, 2, 3, 3, 4,
        4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13,
        13, 14, 14, 15, 15, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6,
        7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15,
        15, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9,
        9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 15, 15, 16, 0, 0, 1, 1,
        2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11,
        11, 12, 13, 13, 14, 14, 15, 15, 16, 0, 0, 1, 1, 2, 2, 3, 3, 4,
        4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 11, 11, 12, 12, 13, 13,
        14, 14, 15, 15, 16, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6,
        7, 7, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15,
        16, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 8, 8, 9, 9,
        10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 16, 16, 0, 0, 1,
        1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 8, 8, 9, 9, 10, 10, 11,
        11, 12, 12, 13, 13, 14, 15, 15, 16, 16, 0, 0, 1, 1, 2, 2, 3,
        3, 4, 4, 5, 5, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12,
        13, 14, 14, 15, 15, 16, 16, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5,
        5, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 13, 13, 14, 14,
        15, 15, 16, 16, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 6, 6, 7, 7,
        8, 8, 9, 9, 10, 10, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16,
        17, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 6, 6, 7, 7, 8, 8, 9, 9,
        10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 16, 16, 17, 0, 0, 1,
        1, 2, 2, 3, 3, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 10, 10, 11, 11,
        12, 12, 13, 13, 14, 15, 15, 16, 16, 17, 0, 0, 1, 1, 2, 2, 3,
        3, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 10, 10, 11, 11, 12, 12, 13,
        14, 14, 15, 15, 16, 16, 17, 0, 0, 1, 1, 2, 2, 3, 3, 4, 5, 5,
        6, 6, 7, 7, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 14, 14, 15,
        15, 16, 16, 17, 0, 0, 1, 1, 2, 2, 3, 3, 4, 5, 5, 6, 6, 7, 7,
        8, 9, 9, 10, 10, 11, 11, 12, 13, 13, 14, 14, 15, 15, 16, 17,
        17, 0, 0, 1, 1, 2, 2, 3, 4, 4, 5, 5, 6, 6, 7, 8, 8, 9, 9, 10,
        10, 11, 12, 12, 13, 13, 14, 14, 15, 16, 16, 17, 17, 0, 0, 1,
        1, 2, 2, 3, 4, 4, 5, 5, 6, 6, 7, 8, 8, 9, 9, 10, 10, 11, 12,
        12, 13, 13, 14, 14, 15, 16, 16, 17, 17, 0, 0, 1, 1, 2, 2, 3,
        4, 4, 5, 5, 6, 6, 7, 8, 8, 9, 9, 10, 11, 11, 12, 12, 13, 13,
        14, 15, 15, 16, 16, 17, 17, 0, 0, 1, 1, 2, 2, 3, 4, 4, 5, 5,
        6, 7, 7, 8, 8, 9, 9, 10, 11, 11, 12, 12, 13, 14, 14, 15, 15,
        16, 16, 17, 18, 0, 0, 1, 1, 2, 2, 3, 4, 4, 5, 5, 6, 7, 7, 8,
        8, 9, 10, 10, 11, 11, 12, 12, 13, 14, 14, 15, 15, 16, 17, 17,
        18, 0, 0, 1, 1, 2, 2, 3, 4, 4, 5, 5, 6, 7, 7, 8, 8, 9, 10, 10,
        11, 11, 12, 13, 13, 14, 14, 15, 15, 16, 17, 17, 18, 0, 0, 1,
        1, 2, 2, 3, 4, 4, 5, 5, 6, 7, 7, 8, 8, 9, 10, 10, 11, 11, 12,
        13, 13, 14, 14, 15, 16, 16, 17, 17, 18, 0, 0, 1, 1, 2, 3, 3,
        4, 4, 5, 6, 6, 7, 7, 8, 9, 9, 10, 10, 11, 12, 12, 13, 13, 14,
        15, 15, 16, 16, 17, 18, 18, 0, 0, 1, 1, 2, 3, 3, 4, 4, 5, 6,
        6, 7, 7, 8, 9, 9, 10, 10, 11, 12, 12, 13, 13, 14, 15, 15, 16,
        16, 17, 18, 18, 0, 0, 1, 1, 2, 3, 3, 4, 4, 5, 6, 6, 7, 7, 8,
        9, 9, 10, 10, 11, 12, 12, 13, 13, 14, 15, 15, 16, 17, 17, 18,
        18, 0, 0, 1, 1, 2, 3, 3, 4, 4, 5, 6, 6, 7, 7, 8, 9, 9, 10, 11,
        11, 12, 12, 13, 14, 14, 15, 15, 16, 17, 17, 18, 18, 0, 0, 1,
        1, 2, 3, 3, 4, 4, 5, 6, 6, 7, 8, 8, 9, 9, 10, 11, 11, 12, 12,
        13, 14, 14, 15, 16, 16, 17, 17, 18, 19, 0, 0, 1, 1, 2, 3, 3,
        4, 4, 5, 6, 6, 7, 8, 8, 9, 9, 10, 11, 11, 12, 13, 13, 14, 14,
        15, 16, 16, 17, 17, 18, 19, 0, 0, 1, 1, 2, 3, 3, 4, 4, 5, 6,
        6, 7, 8, 8, 9, 9, 10, 11, 11, 12, 13, 13, 14, 14, 15, 16, 16,
        17, 18, 18, 19, 0, 0, 1, 1, 2, 3, 3, 4, 5, 5, 6, 6, 7, 8, 8,
        9, 10, 10, 11, 11, 12, 13, 13, 14, 15, 15, 16, 16, 17, 18, 18,
        19, 0, 0, 1, 1, 2, 3, 3, 4, 5, 5, 6, 6, 7, 8, 8, 9, 10, 10,
        11, 11, 12, 13, 13, 14, 15, 15, 16, 17, 17, 18, 18, 19, 0, 0,
        1, 1, 2, 3, 3, 4, 5, 5, 6, 6, 7, 8, 8, 9, 10, 10, 11, 12, 12,
        13, 13, 14, 15, 15, 16, 17, 17, 18, 19, 19, 0, 0, 1, 1, 2, 3,
        3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 10, 10, 11, 12, 12, 13, 14, 14,
        15, 15, 16, 17, 17, 18, 19, 19, 0, 0, 1, 1, 2, 3, 3, 4, 5, 5,
        6, 7, 7, 8, 9, 9, 10, 10, 11, 12, 12, 13, 14, 14, 15, 16, 16,
        17, 18, 18, 19, 19, 0, 0, 1, 1, 2, 3, 3, 4, 5, 5, 6, 7, 7, 8,
        9, 9, 10, 11, 11, 12, 12, 13, 14, 14, 15, 16, 16, 17, 18, 18,
        19, 20, 0, 0, 1, 1, 2, 3, 3, 4, 5, 5, 6, 7, 7, 8, 9, 9, 10,
        11, 11, 12, 13, 13, 14, 14, 15, 16, 16, 17, 18, 18, 19, 20, 0,
        0, 1, 1, 2, 3, 3, 4, 5, 5, 6, 7, 7, 8, 9, 9, 10, 11, 11, 12,
        13, 13, 14, 15, 15, 16, 17, 17, 18, 18, 19, 20, 0, 0, 1, 1, 2,
        3, 3, 4, 5, 5, 6, 7, 7, 8, 9, 9, 10, 11, 11, 12, 13, 13, 14,
        15, 15, 16, 17, 17, 18, 19, 19, 20, 0, 0, 1, 1, 2, 3, 3, 4, 5,
        5, 6, 7, 7, 8, 9, 9, 10, 11, 11, 12, 13, 13, 14, 15, 15, 16,
        17, 17, 18, 19, 19, 20, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 8,
        8, 9, 10, 10, 11, 12, 12, 13, 14, 14, 15, 16, 16, 17, 18, 18,
        19, 20, 20, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 8, 8, 9, 10,
        10, 11, 12, 12, 13, 14, 14, 15, 16, 16, 17, 18, 18, 19, 20,
        20, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 8, 8, 9, 10, 10, 11,
        12, 12, 13, 14, 14, 15, 16, 16, 17, 18, 18, 19, 20, 20, 0, 0,
        1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 8, 8, 9, 10, 10, 11, 12, 12, 13,
        14, 14, 15, 16, 16, 17, 18, 18, 19, 20, 21, 0, 0, 1, 2, 2, 3,
        4, 4, 5, 6, 6, 7, 8, 8, 9, 10, 10, 11, 12, 12, 13, 14, 15, 15,
        16, 17, 17, 18, 19, 19, 20, 21, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6,
        6, 7, 8, 8, 9, 10, 10, 11, 12, 13, 13, 14, 15, 15, 16, 17, 17,
        18, 19, 19, 20, 21, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 8, 8,
        9, 10, 11, 11, 12, 13, 13, 14, 15, 15, 16, 17, 17, 18, 19, 20,
        20, 21, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 8, 9, 9, 10, 11,
        11, 12, 13, 13, 14, 15, 15, 16, 17, 18, 18, 19, 20, 20, 21, 0,
        0, 1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 8, 9, 9, 10, 11, 11, 12, 13,
        13, 14, 15, 16, 16, 17, 18, 18, 19, 20, 20, 21, 0, 0, 1, 2, 2,
        3, 4, 4, 5, 6, 7, 7, 8, 9, 9, 10, 11, 11, 12, 13, 14, 14, 15,
        16, 16, 17, 18, 18, 19, 20, 21, 21, 0, 0, 1, 2, 2, 3, 4, 4, 5,
        6, 7, 7, 8, 9, 9, 10, 11, 12, 12, 13, 14, 14, 15, 16, 16, 17,
        18, 19, 19, 20, 21, 21, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6, 7, 7, 8,
        9, 9, 10, 11, 12, 12, 13, 14, 14, 15, 16, 17, 17, 18, 19, 19,
        20, 21, 22, 0, 0, 1, 2, 2, 3, 4, 4, 5, 6, 7, 7, 8, 9, 9, 10,
        11, 12, 12, 13, 14, 14, 15, 16, 17, 17, 18, 19, 19, 20, 21,
        22, 0, 0, 1, 2, 2, 3, 4, 5, 5, 6, 7, 7, 8, 9, 10, 10, 11, 12,
        12, 13, 14, 15, 15, 16, 17, 17, 18, 19, 20, 20, 21, 22, 0, 0,
        1, 2, 2, 3, 4, 5, 5, 6, 7, 7, 8, 9, 10, 10, 11, 12, 12, 13,
        14, 15, 15, 16, 17, 18, 18, 19, 20, 20, 21, 22, 0, 0, 1, 2, 2,
        3, 4, 5, 5, 6, 7, 7, 8, 9, 10, 10, 11, 12, 13, 13, 14, 15, 15,
        16, 17, 18, 18, 19, 20, 21, 21, 22, 0, 0, 1, 2, 2, 3, 4, 5, 5,
        6, 7, 8, 8, 9, 10, 10, 11, 12, 13, 13, 14, 15, 16, 16, 17, 18,
        18, 19, 20, 21, 21, 22, 0, 0, 1, 2, 2, 3, 4, 5, 5, 6, 7, 8, 8,
        9, 10, 11, 11, 12, 13, 13, 14, 15, 16, 16, 17, 18, 19, 19, 20,
        21, 22, 22, 0, 0, 1, 2, 2, 3, 4, 5, 5, 6, 7, 8, 8, 9, 10, 11,
        11, 12, 13, 14, 14, 15, 16, 16, 17, 18, 19, 19, 20, 21, 22,
        22, 0, 0, 1, 2, 2, 3, 4, 5, 5, 6, 7, 8, 8, 9, 10, 11, 11, 12,
        13, 14, 14, 15, 16, 17, 17, 18, 19, 20, 20, 21, 22, 22, 0, 0,
        1, 2, 2, 3, 4, 5, 5, 6, 7, 8, 8, 9, 10, 11, 11, 12, 13, 14,
        14, 15, 16, 17, 17, 18, 19, 20, 20, 21, 22, 23, 0, 0, 1, 2, 2,
        3, 4, 5, 5, 6, 7, 8, 8, 9, 10, 11, 11, 12, 13, 14, 14, 15, 16,
        17, 17, 18, 19, 20, 20, 21, 22, 23, 0, 0, 1, 2, 3, 3, 4, 5, 6,
        6, 7, 8, 9, 9, 10, 11, 12, 12, 13, 14, 15, 15, 16, 17, 18, 18,
        19, 20, 21, 21, 22, 23, 0, 0, 1, 2, 3, 3, 4, 5, 6, 6, 7, 8, 9,
        9, 10, 11, 12, 12, 13, 14, 15, 15, 16, 17, 18, 18, 19, 20, 21,
        21, 22, 23, 0, 0, 1, 2, 3, 3, 4, 5, 6, 6, 7, 8, 9, 9, 10, 11,
        12, 12, 13, 14, 15, 15, 16, 17, 18, 19, 19, 20, 21, 22, 22,
        23, 0, 0, 1, 2, 3, 3, 4, 5, 6, 6, 7, 8, 9, 9, 10, 11, 12, 13,
        13, 14, 15, 16, 16, 17, 18, 19, 19, 20, 21, 22, 22, 23, 0, 0,
        1, 2, 3, 3, 4, 5, 6, 6, 7, 8, 9, 9, 10, 11, 12, 13, 13, 14,
        15, 16, 16, 17, 18, 19, 19, 20, 21, 22, 23, 23, 0, 0, 1, 2, 3,
        3, 4, 5, 6, 6, 7, 8, 9, 10, 10, 11, 12, 13, 13, 14, 15, 16,
        16, 17, 18, 19, 20, 20, 21, 22, 23, 23, 0, 0, 1, 2, 3, 3, 4,
        5, 6, 6, 7, 8, 9, 10, 10, 11, 12, 13, 13, 14, 15, 16, 17, 17,
        18, 19, 20, 20, 21, 22, 23, 24, 0, 0, 1, 2, 3, 3, 4, 5, 6, 7,
        7, 8, 9, 10, 10, 11, 12, 13, 14, 14, 15, 16, 17, 17, 18, 19,
        20, 21, 21, 22, 23, 24, 0, 0, 1, 2, 3, 3, 4, 5, 6, 7, 7, 8, 9,
        10, 10, 11, 12, 13, 14, 14, 15, 16, 17, 18, 18, 19, 20, 21,
        21, 22, 23, 24, 0, 0, 1, 2, 3, 3, 4, 5, 6, 7, 7, 8, 9, 10, 11,
        11, 12, 13, 14, 14, 15, 16, 17, 18, 18, 19, 20, 21, 22, 22,
        23, 24, 0, 0, 1, 2, 3, 3, 4, 5, 6, 7, 7, 8, 9, 10, 11, 11, 12,
        13, 14, 15, 15, 16, 17, 18, 19, 19, 20, 21, 22, 22, 23, 24, 0,
        0, 1, 2, 3, 3, 4, 5, 6, 7, 7, 8, 9, 10, 11, 11, 12, 13, 14,
        15, 15, 16, 17, 18, 19, 19, 20, 21, 22, 23, 23, 24, 0, 0, 1,
        2, 3, 4, 4, 5, 6, 7, 8, 8, 9, 10, 11, 12, 12, 13, 14, 15, 16,
        16, 17, 18, 19, 20, 20, 21, 22, 23, 24, 24, 0, 0, 1, 2, 3, 4,
        4, 5, 6, 7, 8, 8, 9, 10, 11, 12, 12, 13, 14, 15, 16, 16, 17,
        18, 19, 20, 20, 21, 22, 23, 24, 24, 0, 0, 1, 2, 3, 4, 4, 5, 6,
        7, 8, 8, 9, 10, 11, 12, 12, 13, 14, 15, 16, 16, 17, 18, 19,
        20, 21, 21, 22, 23, 24, 25, 0, 0, 1, 2, 3, 4, 4, 5, 6, 7, 8,
        8, 9, 10, 11, 12, 12, 13, 14, 15, 16, 17, 17, 18, 19, 20, 21,
        21, 22, 23, 24, 25, 0, 0, 1, 2, 3, 4, 4, 5, 6, 7, 8, 8, 9, 10,
        11, 12, 13, 13, 14, 15, 16, 17, 17, 18, 19, 20, 21, 22, 22,
        23, 24, 25, 0, 0, 1, 2, 3, 4, 4, 5, 6, 7, 8, 9, 9, 10, 11, 12,
        13, 13, 14, 15, 16, 17, 18, 18, 19, 20, 21, 22, 22, 23, 24,
        25, 0, 0, 1, 2, 3, 4, 4, 5, 6, 7, 8, 9, 9, 10, 11, 12, 13, 14,
        14, 15, 16, 17, 18, 18, 19, 20, 21, 22, 23, 23, 24, 25, 0, 0,
        1, 2, 3, 4, 4, 5, 6, 7, 8, 9, 9, 10, 11, 12, 13, 14, 14, 15,
        16, 17, 18, 19, 19, 20, 21, 22, 23, 23, 24, 25, 0, 0, 1, 2, 3,
        4, 4, 5, 6, 7, 8, 9, 9, 10, 11, 12, 13, 14, 14, 15, 16, 17,
        18, 19, 19, 20, 21, 22, 23, 24, 24, 25, 0, 0, 1, 2, 3, 4, 5,
        5, 6, 7, 8, 9, 10, 10, 11, 12, 13, 14, 15, 15, 16, 17, 18, 19,
        20, 20, 21, 22, 23, 24, 25, 25, 0, 0, 1, 2, 3, 4, 5, 5, 6, 7,
        8, 9, 10, 10, 11, 12, 13, 14, 15, 15, 16, 17, 18, 19, 20, 20,
        21, 22, 23, 24, 25, 26, 0, 0, 1, 2, 3, 4, 5, 5, 6, 7, 8, 9,
        10, 10, 11, 12, 13, 14, 15, 16, 16, 17, 18, 19, 20, 21, 21,
        22, 23, 24, 25, 26, 0, 0, 1, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10,
        11, 11, 12, 13, 14, 15, 16, 16, 17, 18, 19, 20, 21, 22, 22,
        23, 24, 25, 26, 0, 0, 1, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11,
        11, 12, 13, 14, 15, 16, 17, 17, 18, 19, 20, 21, 22, 22, 23,
        24, 25, 26, 0, 0, 1, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 11,
        12, 13, 14, 15, 16, 17, 17, 18, 19, 20, 21, 22, 23, 23, 24,
        25, 26, 0, 0, 1, 2, 3, 4, 5, 6, 6, 7, 8, 9, 10, 11, 12, 12,
        13, 14, 15, 16, 17, 18, 18, 19, 20, 21, 22, 23, 24, 24, 25,
        26, 0, 0, 1, 2, 3, 4, 5, 6, 6, 7, 8, 9, 10, 11, 12, 12, 13,
        14, 15, 16, 17, 18, 18, 19, 20, 21, 22, 23, 24, 25, 25, 26, 0,
        0, 1, 2, 3, 4, 5, 6, 6, 7, 8, 9, 10, 11, 12, 13, 13, 14, 15,
        16, 17, 18, 19, 19, 20, 21, 22, 23, 24, 25, 26, 26, 0, 0, 1,
        2, 3, 4, 5, 6, 6, 7, 8, 9, 10, 11, 12, 13, 13, 14, 15, 16, 17,
        18, 19, 20, 20, 21, 22, 23, 24, 25, 26, 26, 0, 0, 1, 2, 3, 4,
        5, 6, 6, 7, 8, 9, 10, 11, 12, 13, 13, 14, 15, 16, 17, 18, 19,
        20, 20, 21, 22, 23, 24, 25, 26, 27, 0, 0, 1, 2, 3, 4, 5, 6, 7,
        7, 8, 9, 10, 11, 12, 13, 14, 14, 15, 16, 17, 18, 19, 20, 21,
        21, 22, 23, 24, 25, 26, 27, 0, 0, 1, 2, 3, 4, 5, 6, 7, 7, 8,
        9, 10, 11, 12, 13, 14, 15, 15, 16, 17, 18, 19, 20, 21, 22, 22,
        23, 24, 25, 26, 27, 0, 0, 1, 2, 3, 4, 5, 6, 7, 7, 8, 9, 10,
        11, 12, 13, 14, 15, 15, 16, 17, 18, 19, 20, 21, 22, 23, 23,
        24, 25, 26, 27, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 8, 9, 10, 11,
        12, 13, 14, 15, 16, 16, 17, 18, 19, 20, 21, 22, 23, 24, 24,
        25, 26, 27, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 8, 9, 10, 11, 12,
        13, 14, 15, 16, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 25,
        26, 27, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 8, 9, 10, 11, 12, 13,
        14, 15, 16, 17, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 26,
        27, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 10, 11, 12, 13, 14,
        15, 16, 17, 18, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 27, 0,
        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 10, 11, 12, 13, 14, 15, 16,
        17, 18, 19, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 0, 0, 1,
        2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 11, 12, 13, 14, 15, 16, 17,
        18, 19, 20, 20, 21, 22, 23, 24, 25, 26, 27, 28, 0, 0, 1, 2, 3,
        4, 5, 6, 7, 8, 9, 10, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
        20, 21, 21, 22, 23, 24, 25, 26, 27, 28, 0, 0, 1, 2, 3, 4, 5,
        6, 7, 8, 9, 10, 11, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
        21, 22, 22, 23, 24, 25, 26, 27, 28, 0, 0, 1, 2, 3, 4, 5, 6, 7,
        8, 9, 10, 11, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,
        23, 23, 24, 25, 26, 27, 28, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,
        10, 11, 12, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,
        24, 24, 25, 26, 27, 28, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10,
        11, 12, 13, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,
        25, 26, 26, 27, 28, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
        12, 13, 14, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,
        26, 27, 28, 28, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,
        13, 14, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26,
        27, 28, 29, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
        14, 15, 16, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27,
        28, 29, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,
        15, 16, 17, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28,
        29, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
        16, 17, 18, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 0,
        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,
        18, 19, 20, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 0, 0, 1,
        2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
        19, 20, 21, 22, 22, 23, 24, 25, 26, 27, 28, 29, 0, 0, 1, 2, 3,
        4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
        21, 22, 23, 24, 24, 25, 26, 27, 28, 29, 0, 0, 1, 2, 3, 4, 5,
        6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
        22, 23, 24, 25, 26, 27, 27, 28, 29, 0, 0, 1, 2, 3, 4, 5, 6, 7,
        8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,
        24, 25, 26, 27, 28, 29, 30, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,
        10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,
        25, 26, 27, 28, 29, 30, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10,
        11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,
        26, 27, 28, 29, 30, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
        12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26,
        27, 28, 29, 30, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,
        13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27,
        28, 29, 30, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
        14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28,
        29, 30, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,
        15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
        30, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
        16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 0,
        1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
        19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31
};

#endif

s16 FreeTypeFont::drawChar(MutableBitmapBase* bitmap, u32 letter, s16 x, s16 y, u16 clipX1, u16 clipY1, u16 clipX2, u16 clipY2) {

	getSbit(letter);

	u8 fontWidth = _sbit->width;
	u8 fontHeight = _sbit->height ;
	s16 output = x +  _sbit->xadvance;

	// No need to draw blank or glyphs missing a bitmap
	switch (letter) {
		case 10:  // Line feed
		case 13:  // Carriage return
			return output;
		default:
			break;
	}
	if (!_sbit->buffer) return output;

	u8 maxGrays = _sbit->max_grays;
	if (maxGrays == 0) return output;

	// offsets for the glyph
	x += _sbit->left;
	y -= _sbit->top-_scaler.height;

	// no need to blit to screen
	if (y > clipY2) return output;
	if (y + fontHeight < clipY1) return output;
	if (x > clipX2) return output;
	if (x + fontWidth < clipX1) return output;

	// Calculate values for clipping
	s16 startX = x > clipX1 ? x : clipX1;
	s16 endX = x + fontWidth - 1 < clipX2 ? x + fontWidth - 1: clipX2;
	s16 startY = y > clipY1 ? y : clipY1;
	s16 endY = y + fontHeight - 1 < clipY2 ? y + fontHeight - 1: clipY2;

	// Calculate clipping starting offsets - tells us the pixel offset
	// from the top-left of the character that we start drawing from
	u16 offsetStartX = x > clipX1 ? 0 : clipX1 - x;
	u16 offsetStartY = y > clipY1 ? 0 : clipY1 - y;

	// Calculate dimensions of region to copy
	u16 clipWidth = (endX - startX) + 1;
	u16 clipHeight = (endY - startY) + 1;

	// Ensure region to be drawn does not exceed the size of the character
	if (clipWidth > fontWidth - offsetStartX) clipWidth = fontWidth - offsetStartX;
	if (clipHeight > fontHeight - offsetStartY) clipHeight = fontHeight - offsetStartY;

	// Abort if there is no copying to be done
	if ((clipWidth == 0) || (clipHeight == 0)) return output;

	// Copy the pixel data
	u8 grayLevel;
	u8* src = _sbit->buffer;
	u16 rgb;
	u16 bitmapColour;
	
	// This is the colour of the font
	u16 sourceColour = getColour();
	u16 r = sourceColour & 0x7C00;
	u16 g = sourceColour & 0x03E0;
	u16 b = sourceColour & 0x001F;
	
	for (u16 pY = 0; pY < clipHeight; ++pY) {              
		for (u16 pX = 0; pX < clipWidth; ++pX) {  
		
			grayLevel = *(src+ (offsetStartY+pY) * fontWidth+ offsetStartX+pX);
			
			if (grayLevel > 0) {
				
				// We do nothing for most of a bitmap (blank pixels)
				if (grayLevel == maxGrays) {
					// We just need to copy the few opaque pixels 
					bitmap->setPixel(x + offsetStartX + pX, y + offsetStartY + pY, sourceColour);
				} else {
				
					// Antialiasing for the many gray pixels
					// We get the existing colour 
					bitmapColour = bitmap->getPixel(x + offsetStartX + pX, y + offsetStartY + pY);
					
					// Mix it with the font colour with regards to the
					// grayLevel (opacity/transparency)making the
					// transparency colour unnecessary

					// This is good enough for now: 

#ifdef slow
					
					rgb = 0x8000;
					rgb = rgb | ((((bitmapColour & 0x7C00) * (maxGrays-grayLevel) + r * grayLevel) /maxGrays) & 0x7C00); 
					rgb = rgb | ((((bitmapColour & 0x03E0) * (maxGrays-grayLevel) + g * grayLevel) /maxGrays) & 0x03E0); 
					rgb = rgb | (((bitmapColour & 0x001F) * (maxGrays-grayLevel) + b * grayLevel) /maxGrays);
#endif

					// The following methods should be benchmarked to see if it is worth using them (speed against simplicity/memory...)

#ifdef fast
					// Needs no precalculated data.  Less
					// multiplications/divisions (but a test)
					rgb = bitmapColour;
					s16 increment = r - (bitmapColour & 0x7C00);
					rgb = increment >= 0 ? rgb + ((increment * grayLevel /maxGrays) & 0x7C00): rgb - ((-increment * grayLevel / maxGrays) & 0x7C00);  
					increment = g- (bitmapColour & 0x03E0);
					rgb = increment >= 0 ? rgb + ((increment * grayLevel /maxGrays) & 0x03E0) : rgb - ((-increment * grayLevel / maxGrays) & 0x03E0);
					increment = b- (bitmapColour & 0x001F);
					rgb = increment >= 0 ? rgb + increment * grayLevel /maxGrays : rgb - (-increment * grayLevel / maxGrays);                    
#endif

#ifdef faster
					// Needs 1kb to hold the transparencyJump array
					// (or 512b with one more test)
					u32 jump = transparencyJump[grayLevel];
					rgb = bitmapColour;
					
					s16 increment = r - (bitmapColour & 0x7C00);
					if (increment >= 0) {
						rgb += (((increment * grayLevel) >> 8) & 0x7C00);
						rgb += (jump & BIT(increment)) ? 0x0400 : 0;
					} else {
						rgb -= (((-increment * grayLevel) >> 8) & 0x7C00);
						rgb -= (jump & BIT(-increment)) ? 0x0400 : 0;                                
					}
					
					increment = g - (bitmapColour & 0x03E0);
					if (increment >= 0) {
						rgb += (((increment * grayLevel) >> 8) & 0x03E0); 
						rgb += (jump & BIT(increment)) ? 0x0020 : 0;
					} else {
						rgb -= (((-increment * grayLevel)>>8) & 0x03E0);
						rgb -= (jump & BIT(-increment)) ? 0x0020 : 0;                                
					}
					
					increment = b - (bitmapColour & 0x001F);
					if (increment >= 0) {
						rgb += (((increment * grayLevel) >> 8) & 0x001F);
						rgb += (jump & BIT(increment)) ? 0x0001 : 0;
					} else {
						rgb -= (((-increment * grayLevel) >> 8) & 0x001F);
						rgb -= (jump & BIT(-increment)) ? 0x0001 : 0;                                
					}               
#endif   

#ifdef fastest
					// tested result[a<<5+b] must hold the precalculated
					// result of a*b/255 in one byte for 0<=a<256 and
					// 0<=b<31......(it needs 8kb or 4kb with one more
					// test).
					u16 jump = grayLevel << 5;
					rgb = bitmapColour;
					
					s16 increment = (r >> 10) - ((bitmapColour & 0x7FFF) >> 10);
					rgb = increment >=0 ? rgb + (result[jump+increment] << 10): rgb - (result[jump-increment] << 10);  
					
					increment = (g >> 5) - ((bitmapColour & 0x03FF) >> 5);
					rgb = increment >= 0 ? rgb + (result[jump+increment] << 5): rgb - (result[jump-increment] << 5);  
					increment = b - (bitmapColour & 0x001F);
					rgb = increment >= 0 ? rgb + result[jump+increment]: rgb - result[jump-increment];
#endif
					
					/*
					It's possible to make 2 cases grayLevel<128 and
					grayLevel>=128.... and to change the roles of
					sourceColor and bitmapColor, with one more test, it
					would halve the memory requirements of the precalculated
					data.
					*/
					
					bitmap->setPixel(x + offsetStartX + pX, y + offsetStartY + pY, rgb);
				}                            
			}
		}
	}
		
	return output;
}
