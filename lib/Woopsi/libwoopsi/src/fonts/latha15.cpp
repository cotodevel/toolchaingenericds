#include "latha15.h"
#include "typedefsTGDS.h"
#include "dsregs.h"
#include "dsregs_asm.h"

using namespace WoopsiUI;

static const u16 Latha15_glyphdata[631] = {
/* '!' */	0xFFD0,
/* '"' */	0x9999,0x0000,0x0000,0x0000,
/* '#' */	0x1108,0x8444,0x4FF9,0x1088,0x44FF,0xA211,0x0880,0x0000,0x0000,
/* '$' */	0x1079,0x4C99,0x121C,0x0E12,0x264A,0xA382,0x0000,
/* '%' */	0x7088,0x9089,0x08A0,0x8A07,0x2004,0xE051,0x0910,0x9111,0x110E,0x0000,0x0000,0x0000,
/* '&' */	0x3822,0x1108,0x8281,0x8141,0x1185,0x4111,0x4710,0x0000,0x0000,
/* ''' */	0xF000,
/* '(' */	0x2929,0x2492,0x2488,
/* ')' */	0x8922,0x4924,0xA4A0,
/* '*' */	0x27C8,0xA500,0x0000,0x0000,0x0000,
/* '+' */	0x0000,0x0081,0x023F,0x8810,0x2000,0x0000,0x0000,
/* ',' */	0x001C,
/* '-' */	0x0000,0x0000,0xF000,0x0000,
/* '.' */	0x0010,
/* '/' */	0x1122,0x2244,0x4488,0x0000,
/* '0' */	0x388A,0x0C18,0x3060,0xC183,0x0511,0xC000,0x0000,
/* '1' */	0x1359,0x1111,0x1111,0x0000,
/* '2' */	0x3C8A,0x0810,0x2081,0x0410,0x4107,0xF000,0x0000,
/* '3' */	0x388A,0x1020,0xC701,0x0103,0x0711,0xC000,0x0000,
/* '4' */	0x0206,0x0A12,0x1222,0x4282,0xFF02,0x0202,0x0000,0x0000,
/* '5' */	0x7E81,0x040F,0x9080,0x8103,0x0511,0xC000,0x0000,
/* '6' */	0x388A,0x0C0B,0x98A0,0xC183,0x0511,0xC000,0x0000,
/* '7' */	0xFE08,0x1040,0x8204,0x0810,0x4081,0x0000,0x0000,
/* '8' */	0x388A,0x0C14,0x4711,0x4183,0x0511,0xC000,0x0000,
/* '9' */	0x388A,0x0C18,0x3051,0x9D03,0x0511,0xC000,0x0000,
/* ':' */	0x1010,
/* ';' */	0x101C,
/* '<' */	0x0000,0x0011,0xCC20,0x301C,0x0400,0x0000,0x0000,
/* '=' */	0x0000,0x000F,0xE000,0x00FE,0x0000,0x0000,0x0000,
/* '>' */	0x0000,0x0407,0x0180,0x8671,0x0000,0x0000,0x0000,
/* '?' */	0x388A,0x0C10,0x2082,0x0810,0x2000,0x8000,0x0000,
/* '@' */	0x07E0,0x3030,0x8012,0x1D24,0x4631,0x0464,0x08C8,0x2190,0x4320,0x8A23,0x223B,0x8200,0x2301,0x81FC,0x0000,
/* 'A' */	0x080A,0x0502,0x8221,0x1088,0xFE41,0x20A0,0x3010,0x0000,0x0000,
/* 'B' */	0xFF40,0xA030,0x1817,0xF205,0x0180,0xC060,0x5FC0,0x0000,0x0000,
/* 'C' */	0x1F08,0x2406,0x0080,0x2008,0x0200,0x8010,0x1208,0x7C00,0x0000,0x0000,
/* 'D' */	0xFE20,0x480A,0x0180,0x6018,0x0601,0x8060,0x2813,0xF800,0x0000,0x0000,
/* 'E' */	0xFFC0,0x2010,0x0807,0xFA01,0x0080,0x4020,0x1FF0,0x0000,0x0000,
/* 'F' */	0xFF80,0x8080,0x8080,0xFE80,0x8080,0x8080,0x0000,0x0000,
/* 'G' */	0x1E08,0x440A,0x0080,0x2008,0x7E01,0x8050,0x2210,0x7800,0x0000,0x0000,
/* 'H' */	0x80C0,0x6030,0x180F,0xFE03,0x0180,0xC060,0x3010,0x0000,0x0000,
/* 'I' */	0xFFF0,
/* 'J' */	0x0410,0x4104,0x1041,0x8618,0x5E00,0x0000,
/* 'K' */	0x80C0,0xA090,0x8884,0xC2A1,0x8882,0x4120,0x5010,0x0000,0x0000,
/* 'L' */	0x8102,0x0408,0x1020,0x4081,0x0207,0xF000,0x0000,
/* 'M' */	0x8038,0x0F01,0xD05A,0x0B22,0x644C,0x518A,0x3146,0x10C2,0x1000,0x0000,0x0000,
/* 'N' */	0x80E0,0x6834,0x190C,0x4623,0x0982,0xC160,0x7010,0x0000,0x0000,
/* 'O' */	0x1E08,0x440A,0x0180,0x6018,0x0601,0x8050,0x2210,0x7800,0x0000,0x0000,
/* 'P' */	0xFE40,0xA030,0x180C,0x0BF9,0x0080,0x4020,0x1000,0x0000,0x0000,
/* 'Q' */	0x1E08,0x440A,0x0180,0x6018,0x0601,0x8051,0xB218,0x7B00,0x0000,0x0000,
/* 'R' */	0xFE40,0xA030,0x180C,0x0BF9,0x0882,0x4120,0x5010,0x0000,0x0000,
/* 'S' */	0x3E20,0xA030,0x0401,0xC01C,0x0100,0xC050,0x47C0,0x0000,0x0000,
/* 'T' */	0xFF84,0x0201,0x0080,0x4020,0x1008,0x0402,0x0100,0x0000,0x0000,
/* 'U' */	0x80C0,0x6030,0x180C,0x0603,0x0180,0xC050,0x47C0,0x0000,0x0000,
/* 'V' */	0x80C0,0x5048,0x2411,0x1088,0x4414,0x0A02,0x0100,0x0000,0x0000,
/* 'W' */	0x8103,0x0505,0x0A12,0x1424,0x4448,0x8889,0x1214,0x1428,0x2850,0x5040,0x4080,0x8000,0x0000,0x0000,0x0000,
/* 'X' */	0x4044,0x1044,0x0880,0xA008,0x0280,0x8811,0x0411,0x0140,0x1000,0x0000,0x0000,
/* 'Y' */	0x80A0,0x9044,0x4140,0xA020,0x1008,0x0402,0x0100,0x0000,0x0000,
/* 'Z' */	0x7F80,0x8080,0x4040,0x4020,0x2020,0x1010,0x1FF0,0x0000,0x0000,
/* '[' */	0xF249,0x2492,0x4938,
/* '\' */	0x8844,0x4422,0x2211,0x0000,
/* ']' */	0xE492,0x4924,0x9278,
/* '^' */	0x1050,0xA224,0x5040,0x0000,0x0000,0x0000,0x0000,
/* '_' */	0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0003,0xFE00,
/* '`' */	0x9000,0x0000,
/* 'a' */	0x0000,0x01E4,0x3043,0xB983,0x061B,0xD000,0x0000,
/* 'b' */	0x8102,0x05CC,0x5060,0xC183,0x0715,0xC000,0x0000,
/* 'c' */	0x0000,0x0E46,0x0820,0x8204,0x4E00,0x0000,
/* 'd' */	0x0204,0x09D4,0x7060,0xC183,0x0519,0xD000,0x0000,
/* 'e' */	0x0000,0x01C4,0x5060,0xFF81,0x0511,0xC000,0x0000,
/* 'f' */	0x344F,0x4444,0x4444,0x0000,
/* 'g' */	0x0000,0x01D4,0x7060,0xC183,0x0519,0xD030,0x9E00,
/* 'h' */	0x8208,0x2EC6,0x1861,0x8618,0x6100,0x0000,
/* 'i' */	0x9FF0,
/* 'j' */	0x4155,0x5558,
/* 'k' */	0x8102,0x0418,0x5124,0x58C9,0x1214,0x1000,0x0000,
/* 'l' */	0xFFF0,
/* 'm' */	0x0000,0x0000,0x5CEC,0x6308,0x610C,0x2184,0x3086,0x10C2,0x1000,0x0000,0x0000,
/* 'n' */	0x0000,0x2EC6,0x1861,0x8618,0x6100,0x0000,
/* 'o' */	0x0000,0x01C4,0x5060,0xC183,0x0511,0xC000,0x0000,
/* 'p' */	0x0000,0x05CC,0x5060,0xC183,0x0715,0xC810,0x2000,
/* 'q' */	0x0000,0x01D4,0x7060,0xC183,0x0519,0xD020,0x4080,
/* 'r' */	0x000B,0xC888,0x8888,0x0000,
/* 's' */	0x0000,0x1E86,0x081E,0x0418,0x5E00,0x0000,
/* 't' */	0x044F,0x4444,0x4447,0x0000,
/* 'u' */	0x0000,0x2186,0x1861,0x8618,0xDD00,0x0000,
/* 'v' */	0x0000,0x0418,0x2891,0x1428,0x5040,0x8000,0x0000,
/* 'w' */	0x0000,0x0000,0x4218,0x4294,0x9292,0x8A51,0x4A28,0x8210,0x4000,0x0000,0x0000,
/* 'x' */	0x0000,0x0414,0x450A,0x0828,0x5114,0x1000,0x0000,
/* 'y' */	0x0000,0x0418,0x3091,0x2228,0x50A0,0x8102,0x1800,
/* 'z' */	0x0000,0x07F0,0x4102,0x0820,0x4107,0xF000,0x0000,
/* '{' */	0x1908,0x4210,0x9821,0x0842,0x1060,
/* '|' */	0xFFFE,
/* '}' */	0xC108,0x4210,0x8321,0x0842,0x1300,
/* '~' */	0x0000,0x0000,0x0071,0x8E00,0x0000,0x0000,0x0000,0x0000,
/* 0x7F */	0x03F8,0x6186,0x1861,0x8618,0x7F00,0x0000,
};

static const u16 Latha15_offset[95] = {
    0,    1,    5,   14,   21,   33,   42,   43,   46,   49,   54,   61,   62,   66,   67,   71,
   78,   82,   89,   96,  104,  111,  118,  125,  132,  139,  140,  141,  148,  155,  162,  169,
  184,  193,  202,  212,  222,  231,  239,  249,  258,  259,  265,  274,  281,  292,  301,  311,
  320,  330,  339,  348,  357,  366,  375,  390,  401,  410,  419,  422,  426,  429,  436,  445,
  447,  454,  461,  467,  474,  481,  485,  492,  498,  499,  501,  508,  509,  520,  526,  533,
  540,  547,  551,  557,  561,  567,  574,  585,  592,  599,  606,  611,  612,  617,  625
};

static const u8 Latha15_width[95] = {
 1, 4, 9, 7,12, 9, 1, 3, 3, 5, 7, 1, 4, 1, 4, 7,
 4, 7, 7, 8, 7, 7, 7, 7, 7, 1, 1, 7, 7, 7, 7,15,
 9, 9,10,10, 9, 8,10, 9, 1, 6, 9, 7,11, 9,10, 9,
10, 9, 9, 9, 9, 9,15,11, 9, 9, 3, 4, 3, 7, 9, 2,
 7, 7, 6, 7, 7, 4, 7, 6, 1, 2, 7, 1,11, 6, 7, 7,
 7, 4, 6, 4, 6, 7,11, 7, 7, 7, 5, 1, 5, 8, 6
};

Latha15::Latha15(u8 fixedWidth) : PackedFont1 (
	33,
	127,
	Latha15_glyphdata,
	Latha15_offset,
	Latha15_width,
	16,
	4,
	15) {
	if (fixedWidth) setFontWidth(fixedWidth);
};
