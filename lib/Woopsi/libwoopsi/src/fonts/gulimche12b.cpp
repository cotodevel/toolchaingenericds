#include "gulimche12b.h"
#include "typedefsTGDS.h"
#include "dsregs.h"
#include "dsregs_asm.h"

using namespace WoopsiUI;

static const u16 Gulimche12b_glyphdata[424] = {
/* '!' */	0xFFFC,0xF000,
/* '"' */	0xFF00,0x0000,0x0000,
/* '#' */	0x1E3D,0xF9E3,0xC7BF,0xBC78,0xF000,0x0000,
/* '$' */	0x31EF,0xFC70,0xE3CF,0xFDE3,0x0000,
/* '%' */	0x6FFF,0x9E30,0xC79F,0xFF60,0x0000,
/* '&' */	0x736D,0xB673,0xFDB6,0xD9F0,0x0000,
/* ''' */	0xF000,0x0000,
/* '(' */	0x366C,0xCCCC,0xC663,
/* ')' */	0xC663,0x3333,0x366C,
/* '*' */	0x0000,0x0C33,0xF31E,0x0000,0x0000,
/* '+' */	0x0000,0x0C33,0xF30C,0x0000,0x0000,
/* ',' */	0x0000,0x006F,0x0000,
/* '-' */	0x0000,0x0003,0xF000,0x0000,0x0000,
/* '.' */	0x0000,0xF000,
/* '/' */	0x0C31,0x8630,0xC618,0xC300,0x0000,
/* '0' */	0x7B3C,0xF3CF,0x3CF3,0xCDE0,0x0000,
/* '1' */	0x7DB6,0xDB6C,0x0000,
/* '2' */	0x7B3C,0xC318,0xC630,0xC3F0,0x0000,
/* '3' */	0x7B3C,0xC338,0x30F3,0xCDE0,0x0000,
/* '4' */	0x18E3,0x9E7B,0x6DBF,0x1860,0x0000,
/* '5' */	0xFF0C,0x30FB,0x30C3,0xCDE0,0x0000,
/* '6' */	0x7B3C,0x30FB,0x3CF3,0xCDE0,0x0000,
/* '7' */	0xFF3C,0xC318,0x630C,0x30C0,0x0000,
/* '8' */	0x7B3C,0xF37B,0x3CF3,0xCDE0,0x0000,
/* '9' */	0x7B3C,0xF3CD,0xF0C3,0xCDE0,0x0000,
/* ':' */	0x0F03,0xC000,
/* ';' */	0x01B0,0x0378,0x0000,
/* '<' */	0x0000,0xC673,0x0706,0x0C00,0x0000,
/* '=' */	0x0000,0x00FC,0x0FC0,0x0000,0x0000,
/* '>' */	0x000C,0x1838,0x3398,0xC000,0x0000,
/* '?' */	0x7B3C,0xC318,0xC300,0x30C0,0x0000,
/* '@' */	0x39BD,0xFFFF,0xFFFF,0xC1E0,0x0000,
/* 'A' */	0x30C3,0x1E79,0xEFF3,0xCF30,0x0000,
/* 'B' */	0xFB3C,0xF3FB,0x3CF3,0xCFE0,0x0000,
/* 'C' */	0x7B3C,0xF0C3,0x0C33,0xCDE0,0x0000,
/* 'D' */	0xFB3C,0xF3CF,0x3CF3,0xCFE0,0x0000,
/* 'E' */	0xFF0C,0x30FF,0x0C30,0xC3F0,0x0000,
/* 'F' */	0xFF0C,0x30FB,0x0C30,0xC300,0x0000,
/* 'G' */	0x7B3C,0xF0FF,0x3CF3,0xDDF0,0x0000,
/* 'H' */	0xCF3C,0xF3FF,0x3CF3,0xCF30,0x0000,
/* 'I' */	0xFFFF,0xF000,
/* 'J' */	0x18C6,0x318C,0x7BDB,0x8000,
/* 'K' */	0xCF6D,0xBCE3,0xCF36,0xDB30,0x0000,
/* 'L' */	0xC30C,0x30C3,0x0C30,0xC3F0,0x0000,
/* 'M' */	0xCF3F,0xFFFF,0xFFFF,0xCF30,0x0000,
/* 'N' */	0xCF3E,0xFBFF,0xFDF7,0xCF30,0x0000,
/* 'O' */	0x7B3C,0xF3CF,0x3CF3,0xCDE0,0x0000,
/* 'P' */	0xFB3C,0xF3CF,0xEC30,0xC300,0x0000,
/* 'Q' */	0x7B3C,0xF3CF,0x3CF3,0xFDE0,0xC000,
/* 'R' */	0xFB3C,0xF3CF,0xEDB3,0xCF30,0x0000,
/* 'S' */	0x7B3C,0xD830,0x60F3,0xCDE0,0x0000,
/* 'T' */	0xFCC3,0x0C30,0xC30C,0x30C0,0x0000,
/* 'U' */	0xCF3C,0xF3CF,0x3CF3,0xCDE0,0x0000,
/* 'V' */	0xCF3C,0xF379,0xE78C,0x30C0,0x0000,
/* 'W' */	0xFFFF,0xFFFF,0xFFDE,0x79E0,0x0000,
/* 'X' */	0xCF37,0x9E30,0xC79E,0xCF30,0x0000,
/* 'Y' */	0xCF3C,0xDE79,0xE30C,0x30C0,0x0000,
/* 'Z' */	0xFC31,0x8630,0xC618,0xC3F0,0x0000,
/* '[' */	0xFB6D,0xB6DB,0x7000,
/* '\' */	0x7EFD,0xFFF7,0xEFDF,0x9E3C,0x7800,0x0000,
/* ']' */	0xEDB6,0xDB6D,0xF000,
/* '^' */	0x76C0,0x0000,0x0000,0x0000,
/* '_' */	0x0000,0x0000,0x0000,0x000F,0xC000,
/* '`' */	0xCC00,0x0000,0x0000,
/* 'a' */	0x0000,0x1CD9,0xEDB6,0xD9F0,0x0000,
/* 'b' */	0xC30C,0x3ECF,0x3CF3,0xCFE0,0x0000,
/* 'c' */	0x0000,0x1ECF,0x0C30,0xCDE0,0x0000,
/* 'd' */	0x0C30,0xDFCF,0x3CF3,0xCDF0,0x0000,
/* 'e' */	0x0000,0x1ECF,0x3FF0,0xCDE0,0x0000,
/* 'f' */	0x366F,0x6666,0x6600,
/* 'g' */	0x0000,0x1FCF,0x3CDF,0x0F37,0x8000,
/* 'h' */	0xC30C,0x3ECF,0x3CF3,0xCF30,0x0000,
/* 'i' */	0xF3FF,0xF000,
/* 'j' */	0x3303,0x3333,0x33E0,
/* 'k' */	0xC30C,0x33DB,0xCE3C,0xDB30,0x0000,
/* 'l' */	0x3FFF,0xF000,
/* 'm' */	0x0000,0x3EFF,0xFFFF,0xFFF0,0x0000,
/* 'n' */	0x0000,0x3ECF,0x3CF3,0xCF30,0x0000,
/* 'o' */	0x0000,0x1ECF,0x3CF3,0xCDE0,0x0000,
/* 'p' */	0x0000,0x3ECF,0x3CF3,0xFB0C,0x0000,
/* 'q' */	0x0000,0x1FCF,0x3CF3,0x7C30,0xC000,
/* 'r' */	0x0001,0xFE63,0x18C6,0x0000,
/* 's' */	0x0000,0x1ECF,0x0783,0xCDE0,0x0000,
/* 't' */	0x0319,0xF631,0x8C61,0xC000,
/* 'u' */	0x0000,0x33CF,0x3CF3,0xCDF0,0x0000,
/* 'v' */	0x0000,0x33CF,0x379E,0x30C0,0x0000,
/* 'w' */	0x0000,0x3FFF,0xFFDE,0x79E0,0x0000,
/* 'x' */	0x0000,0x33CD,0xE31E,0xCF30,0x0000,
/* 'y' */	0x0000,0x33CF,0x379E,0x30CE,0x0000,
/* 'z' */	0x0000,0x3F0C,0x6318,0xC3F0,0x0000,
/* '{' */	0x198C,0x6370,0xC631,0x8C30,
/* '|' */	0xFFFF,0xFF00,
/* '}' */	0xC318,0xC61D,0x8C63,0x1980,
/* '~' */	0x0000,0x0001,0xFD80,0x0000,0x0000,
/* 0x7F */	0x07F7,0xBDEF,0x7BDF,0xC000,
};

static const u16 Gulimche12b_offset[95] = {
    0,    2,    5,   11,   16,   21,   26,   28,   31,   34,   39,   44,   47,   52,   54,   59,
   64,   67,   72,   77,   82,   87,   92,   97,  102,  107,  109,  112,  117,  122,  127,  132,
  137,  142,  147,  152,  157,  162,  167,  172,  177,  179,  183,  188,  193,  198,  203,  208,
  213,  218,  223,  228,  233,  238,  243,  248,  253,  258,  263,  266,  272,  275,  279,  284,
  287,  292,  297,  302,  307,  312,  315,  320,  325,  327,  330,  335,  337,  342,  347,  352,
  357,  362,  366,  371,  375,  380,  385,  390,  395,  400,  405,  409,  411,  415,  420
};

static const u8 Gulimche12b_width[95] = {
 2, 4, 7, 6, 6, 6, 2, 4, 4, 6, 6, 3, 6, 2, 6, 6,
 3, 6, 6, 6, 6, 6, 6, 6, 6, 2, 3, 6, 6, 6, 6, 6,
 6, 6, 6, 6, 6, 6, 6, 6, 2, 5, 6, 6, 6, 6, 6, 6,
 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 3, 7, 3, 5, 6, 3,
 6, 6, 6, 6, 6, 4, 6, 6, 2, 4, 6, 2, 6, 6, 6, 6,
 6, 5, 6, 5, 6, 6, 6, 6, 6, 6, 5, 2, 5, 6, 5
};

Gulimche12b::Gulimche12b(u8 fixedWidth) : PackedFont1 (
	33,
	127,
	Gulimche12b_glyphdata,
	Gulimche12b_offset,
	Gulimche12b_width,
	12,
	3,
	7) {
	if (fixedWidth) setFontWidth(fixedWidth);
};
